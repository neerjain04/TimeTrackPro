# This script summarizes time spent on different categories and applications
# based on a labeled CSV file generated by the categorizer module.
import csv
from datetime import datetime, timedelta
from collections import defaultdict
import os

# This function parses a duration string in the format 'HH:MM:SS' and returns a timedelta object.
def parse_duration(duration_str):
    """Parses a string like '1:23:45' into a timedelta object."""
    h, m, s = map(int, duration_str.strip().split(':'))
    return timedelta(hours=h, minutes=m, seconds=s)

# This function summarizes the sessions from a labeled CSV file.
def summarize_sessions(file_path):
    category_totals = defaultdict(timedelta)
    app_totals = defaultdict(timedelta)

    if not os.path.exists(file_path):
        print(f"Error: {file_path} not found.")
        return

    with open(file_path, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                duration = parse_duration(row["Duration"])
                category = row.get("Category", "other").lower()
                app = row["Process Name"].lower()

                category_totals[category] += duration
                app_totals[app] += duration
            except Exception as e:
                print(f"Skipping row due to error: {e}")

    print("\nTime Spent by Category:")
    for category, total in sorted(category_totals.items(), key=lambda x: x[1], reverse=True):
        print(f"{category.capitalize():<15} {str(total)}")

    print("\nTop 3 Most Used Apps:")
    top_apps = sorted(app_totals.items(), key=lambda x: x[1], reverse=True)[:3]
    for app, total in top_apps:
        print(f"{app:<20} {str(total)}")

if __name__ == "__main__":
    labeled_csv_path = os.path.join("data", "labeled_log.csv")
    summarize_sessions(labeled_csv_path)
